{"version":3,"sources":["service/RoomDataService.js","components/room/ListRoomsComponent.jsx","service/MemberDataService.js","components/member/ListMemberComponent.jsx","components/room/RoomComponent.jsx","components/member/MemberComponent.jsx","components/RouterApp.jsx","App.js","serviceWorker.js","index.js"],"names":["INSTRUCTOR_API_URL","concat","service_RoomDataService","axios","get","id","delete","room","put","post","ListRoomsComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rooms","message","deleteRoomClicked","bind","assertThisInitialized","updateRoomClicked","addRoomClicked","refreshRooms","_this2","RoomDataService","retrieveAllRooms","then","response","setState","data","_this3","deleteRoom","history","push","console","log","_this4","react_default","a","createElement","className","class","map","key","name","author","status","onClick","joinRoomClicked","Component","ROOT_API","service_MemberDataService","member","ListMembersComponent","members","deleteMemberClicked","updateMemberClicked","addMemberClicked","refreshMembers","MemberDataService","retrieveAllMembers","deleteMember","nickName","gender","role","dob","RoomComponent","match","params","onSubmit","validate","undefined","retrieveRoom","values","errors","length","description","targetDate","createRoom","_this$state","formik_esm","initialValues","validateOnChange","validateOnBlur","enableReinitialize","component","type","MemberComponent","roomId","retrieveMember","createMember","RouterApp","react_router_dom","Fragment","react_router","path","exact","App","components_RouterApp","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29bc8d9f.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'http://localhost:8080'\nconst INSTRUCTOR_API_URL = `${API_URL}/rooms`\n\nclass RoomDataService {\n\n    retrieveAllRooms() {\n        return axios.get(`${INSTRUCTOR_API_URL}`);\n    }\n\n    retrieveRoom(id) {\n        return axios.get(`${INSTRUCTOR_API_URL}/${id}`);\n    }\n\n    deleteRoom(id) {\n        return axios.delete(`${INSTRUCTOR_API_URL}/${id}`);\n    }\n\n    updateRoom(id, room) {\n        return axios.put(`${INSTRUCTOR_API_URL}/${id}`, room);\n    }\n\n    createRoom(room) {\n        return axios.post(`${INSTRUCTOR_API_URL}`, room);\n    }\n}\n\nexport default new RoomDataService()","import React, { Component } from 'react'\nimport RoomDataService from '../../service/RoomDataService';\n\nclass ListRoomsComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            rooms: [],\n            message: null\n        }\n        this.deleteRoomClicked = this.deleteRoomClicked.bind(this)\n        this.updateRoomClicked = this.updateRoomClicked.bind(this)\n        this.addRoomClicked = this.addRoomClicked.bind(this)\n        this.refreshRooms = this.refreshRooms.bind(this)\n    }\n\n    componentDidMount() {\n        this.refreshRooms();\n    }\n\n    refreshRooms() {\n        RoomDataService.retrieveAllRooms()//HARDCODED\n            .then(\n                response => {\n                    //console.log(response);\n                    this.setState({ rooms: response.data })\n                }\n            )\n    }\n\n    deleteRoomClicked(id) {\n        RoomDataService.deleteRoom(id)\n            .then(\n                response => {\n                    this.setState({ message: `Delete of room ${id} Successful` })\n                    this.refreshRooms()\n                }\n            )\n\n    }\n\n    joinRoomClicked(id) {\n        this.props.history.push(`/rooms/member/${id}`)\n    }\n\n    addRoomClicked() {\n        this.props.history.push(`/rooms`)\n    }\n\n    updateRoomClicked(id) {\n        console.log('update ' + id)\n        this.props.history.push(`/rooms/${id}`)\n        this.refreshRooms()\n    }\n\n    render() {\n        console.log('render')\n        return (\n            <div className=\"container\">\n                <h3>All Rooms</h3>\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Id</th>\n                                <th>Name</th>\n                                <th>Author</th>\n                                <th>Status</th>\n                                <th>Join</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.rooms.map(\n                                    room =>\n                                        <tr key={room.id}>\n                                            <td>{room.id}</td>\n                                            <td>{room.name}</td>\n                                            <td>{room.author}</td>\n                                            <td>{room.status}</td>\n                                            <td><button className=\"btn btn-success\" onClick={() => this.joinRoomClicked(room.id)}>Join</button></td>\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.updateRoomClicked(room.id)}>Update</button></td>\n                                            <td><button className=\"btn btn-danger\" onClick={() => this.deleteRoomClicked(room.id)}>Delete</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-success\" onClick={this.addRoomClicked}>Add</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListRoomsComponent","import axios from 'axios'\r\n\r\nconst API_URL = 'http://localhost:8080'\r\nconst ROOT_API = `${API_URL}/members`\r\n\r\nclass MemberDataService {\r\n\r\n    retrieveAllMembers() {\r\n        return axios.get(`${ROOT_API}`);\r\n    }\r\n\r\n    retrieveMember(id) {\r\n        return axios.get(`${ROOT_API}/${id}`);\r\n    }\r\n\r\n    deleteMember(id) {\r\n        return axios.delete(`${ROOT_API}/${id}`);\r\n    }\r\n\r\n    updateMember(id, member) {\r\n        return axios.put(`${ROOT_API}/${id}`, member);\r\n    }\r\n\r\n    createMember(member) {\r\n        return axios.post(`${ROOT_API}`, member);\r\n    }\r\n}\r\n\r\nexport default new MemberDataService()","import React, { Component } from 'react'\r\nimport MemberDataService from '../../service/MemberDataService';\r\n\r\nclass ListMembersComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            members: [],\r\n            message: null\r\n        }\r\n        this.deleteMemberClicked = this.deleteMemberClicked.bind(this)\r\n        this.updateMemberClicked = this.updateMemberClicked.bind(this)\r\n        this.addMemberClicked = this.addMemberClicked.bind(this)\r\n        this.refreshMembers = this.refreshMembers.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshMembers();\r\n    }\r\n\r\n    refreshMembers() {\r\n        MemberDataService.retrieveAllMembers()\r\n            .then(\r\n                response => {\r\n                    console.log(response);\r\n                    this.setState({ members: response.data })\r\n                }\r\n            )\r\n    }\r\n\r\n    deleteMemberClicked(id) {\r\n        MemberDataService.deleteMember(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete of member ${id} Successful` })\r\n                    this.refreshMembers()\r\n                }\r\n            )\r\n\r\n    }\r\n\r\n    addMemberClicked() {\r\n        this.props.history.push(`/member`)\r\n    }\r\n\r\n    updateMemberClicked(id) {\r\n        console.log('update ' + id)\r\n        this.props.history.push(`/member/${id}`)\r\n    }\r\n\r\n    render() {\r\n        console.log('render')\r\n        return (\r\n            <div className=\"container\">\r\n                <h3>All Rooms</h3>\r\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\r\n                <div className=\"container\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Id</th>\r\n                                <th>Nickname</th>\r\n                                <th>Gender</th>\r\n                                <th>Role</th>\r\n                                <th>Day Of Birth</th>\r\n                                <th>Update</th>\r\n                                <th>Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.members.map(\r\n                                    member =>\r\n                                        <tr key={member.id}>\r\n                                            <td>{member.id}</td>\r\n                                            <td>{member.nickName}</td>\r\n                                            <td>{member.gender}</td>\r\n                                            <td>{member.role}</td>\r\n                                            <td>{member.dob}</td>\r\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateMemberClicked(member.id)}>Update</button></td>\r\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteMemberClicked(member.id)}>Delete</button></td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"row\">\r\n                        <button className=\"btn btn-success\" onClick={this.addMemberClicked}>Add</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListMembersComponent","import React, { Component } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport RoomDataService from '../../service/RoomDataService';\n\nclass RoomComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            name: '',\n            author: ''\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n\n    }\n\n    componentDidMount() {\n        console.log(this.state.id)\n        if (this.state.id === undefined) {\n            return\n        }\n\n        RoomDataService.retrieveRoom(this.state.id)\n            .then(response => this.setState({\n                name: response.data.name,\n                author: response.data.author\n            }))\n    }\n\n    validate(values) {\n        let errors = {}\n        if (!values.name) {\n            errors.name = 'Enter a Name'\n        } else if (values.name.length < 5) {\n            errors.description = 'Enter atleast 5 Characters in Description'\n        }\n        if (!values.author) {\n            errors.author = 'Enter a Author'\n        } else if (values.name.length < 5) {\n            errors.description = 'Enter atleast 5 Characters in Author'\n        }\n\n        return errors\n\n    }\n\n    onSubmit(values) {\n        let room = {\n            id: this.state.id,\n            name: values.name,\n            author: values.author,\n            targetDate: values.targetDate\n        }\n\n        RoomDataService.createRoom(room)\n            .then(() => this.props.history.push('/rooms/all'))\n\n        console.log(values);\n    }\n\n    render() {\n\n        let { name, author, id } = this.state\n\n        return (\n            <div>\n                <h3>Room</h3>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ id, name, author }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"description\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Name</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"name\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Author</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"author\" />\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RoomComponent","import React, { Component } from 'react'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport MemberDataService from '../../service/MemberDataService';\r\n\r\nclass MemberComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            id: '',\r\n            roomId: this.props.match.params.id,\r\n            nickName: '',\r\n            gender: '',\r\n            role: '',\r\n            dob: ''\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.state.id)\r\n        if (this.state.id === undefined) {\r\n            return\r\n        }\r\n\r\n        MemberDataService.retrieveMember(this.state.id)\r\n            .then(response => this.setState({\r\n                nickName: response.data.nickName,\r\n                roomId: response.data.roomId,\r\n                gender: response.data.gender,\r\n                role: response.data.role,\r\n                dob: response.data.dob\r\n            }))\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.nickName) {\r\n            errors.nickName = 'Enter a Name'\r\n        } else if (values.nickName.length < 5) {\r\n            errors.nickName = 'Enter atleast 5 Characters in Nickname'\r\n        }\r\n        if (!values.role) {\r\n            errors.role = 'Enter a Author'\r\n        } else if (values.role.length < 3) {\r\n            errors.role = 'Enter atleast 5 Characters in Role'\r\n        }\r\n\r\n        return errors\r\n    }\r\n\r\n    onSubmit(values) {\r\n        let member = {\r\n            roomId: this.state.id,\r\n            nickName: values.nickName,\r\n            gender: values.gender,\r\n            role: values.role,\r\n            dob: values.dob,\r\n            targetDate: values.targetDate\r\n        }\r\n\r\n        MemberDataService.createMember(member)\r\n            .then(() => this.props.history.push('/members/all'))\r\n\r\n        console.log(values);\r\n    }\r\n\r\n    render() {\r\n\r\n        let { roomId, nickName, gender, role, dob } = this.state\r\n\r\n        return (\r\n            <div>\r\n                <h3>Member</h3>\r\n                <div className=\"container\">\r\n                    <Formik\r\n                        initialValues={{ roomId, nickName, gender, role, dob }}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        // validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Nickname</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"nickName\" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Gender</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"gender\" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Role</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"role\" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Day of birth</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"dob\" />\r\n                                    </fieldset>\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemberComponent","import React, { Component } from 'react';\nimport ListRoomsComponent from './room/ListRoomsComponent';\nimport ListMembersComponent from './member/ListMemberComponent';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport RoomComponent from './room/RoomComponent';\nimport MemberComponent from './member/MemberComponent';\n\nclass RouterApp extends Component {\n    render() {\n        return (\n            <Router>\n                <>\n                    <h1>Instructor Application</h1>\n                    <Switch>\n                        <Route path=\"/\" exact component={ListRoomsComponent} />\n                        <Route path=\"/rooms/all\" exact component={ListRoomsComponent} />\n                        <Route path=\"/rooms/member/:id\" exact component={MemberComponent} />\n                        <Route path=\"/members/all\" exact component={ListMembersComponent} />\n                        <Route path=\"/rooms\" component={RoomComponent} />\n                        <Route path=\"/rooms/:id\" component={RoomComponent} />\n                    </Switch>\n                    <Switch>\n                        \n                        <Route path=\"/members\" component={MemberComponent} />\n                        \n                    </Switch>\n                </>\n            </Router>\n        )\n    }\n}\n\nexport default RouterApp","import React, { Component } from 'react';\nimport './App.css';\nimport RouterApp from './components/RouterApp';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <RouterApp />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}